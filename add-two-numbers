/*两个单链表相加。基础*/
1. in c++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int c0 = 0;
        ListNode * head = new ListNode(0);
        ListNode * now = head;
        ListNode * p = l1, * q = l2;
        int a,b,sum;
        while(!(p == NULL && q == NULL && c0 == 0)){
            a = (p == NULL)? 0 : p->val;//太傻叉了。。p == null 的时候返回 p->val被自己傻哭了。。。
            b = (q == NULL)? 0 : q->val;
            p = (p == NULL)? NULL : p->next;
            q = (q == NULL)? NULL : q->next;
            sum = a+b+c0;
            c0 = sum / 10;
            sum = sum % 10;
            ListNode * nownode = new ListNode(sum);
            now -> next = nownode;
            now = now -> next;
        }
        return head->next;
    }
};

2. in python

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @return a ListNode
    def addTwoNumbers(self, l1, l2):
        c = 0
        ans = [ListNode(0)]
        p = l1
        q = l2
        while(not(c == 0 and p == None and q == None)):
            a = p.val if p != None else 0
            b = q.val if q != None else 0
            tsum = a+b+c
            c = tsum // 10
            tsum = tsum % 10
            ans.append(ListNode(tsum))
            ans[-2].next = ans[-1]
            p = p.next if p != None else None
            q = q.next if q != None else None
        return ans[1]
